# Конфигурация для продакшена
services:
  postgres:
    image: postgres:15-alpine
    container_name: horizons_postgres_prod
    environment:
      # Более строгие настройки для продакшена
      POSTGRES_DB: ${POSTGRES_DB:-horizons_db}
      POSTGRES_USER: ${POSTGRES_USER:-horizons_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      # Используем именованные volumes для продакшена
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    # Убираем проброс портов для безопасности
    ports: []
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-horizons_user} -d ${POSTGRES_DB:-horizons_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - horizons_network

  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: horizons_app_prod
    environment:
      # Переменные окружения из .env файла
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      # Админ пользователь по умолчанию
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@horizons.local}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin123}
      ADMIN_FIRST_NAME: ${ADMIN_FIRST_NAME:-System}
      ADMIN_LAST_NAME: ${ADMIN_LAST_NAME:-Administrator}
    # Убираем проброс портов для безопасности
    ports: []
    depends_on:
      - postgres
#      postgres:
#        condition: service_healthy
    restart: unless-stopped
    volumes:
      # Только необходимые volumes для продакшена
      - ./parser:/app/parser:ro
      - parser_results:/app/parser/results
      - app_logs:/app/logs
    networks:
      - horizons_network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production

    container_name: horizons_frontend_prod
    environment:
      NODE_ENV: production

    # Убираем проброс портов для безопасности
    ports: []
    depends_on:
      - app
#    depends_on:
#      app:
#        condition: service_healthy
    restart: unless-stopped
    volumes:
      - frontend_logs:/var/log/nginx
    networks:
      - horizons_network

# Добавляем nginx reverse proxy для продакшена
  nginx:
    image: nginx:alpine
    container_name: horizons_nginx_prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
      - frontend
    restart: unless-stopped
    networks:
      - horizons_network

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  frontend_logs:
    driver: local
  parser_results:
    driver: local
  nginx_logs:
    driver: local

networks:
  horizons_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
