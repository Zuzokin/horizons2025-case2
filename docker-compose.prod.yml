# Конфигурация для продакшена
services:
  postgres:
    environment:
      # Более строгие настройки для продакшена
      POSTGRES_DB: ${POSTGRES_DB:-horizons_db}
      POSTGRES_USER: ${POSTGRES_USER:-horizons_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      # Используем именованные volumes для продакшена
      - postgres_data:/var/lib/postgresql/data
    # Убираем проброс портов для безопасности
    ports: []

  app:
    environment:
      # Переменные окружения из .env файла
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
    # Убираем проброс портов для безопасности
    ports: []
    volumes:
      # Только необходимые volumes для продакшена
      - ./parser:/app/parser:ro
      - app_logs:/app/logs

  frontend:
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    # Убираем проброс портов для безопасности
    ports: []
    volumes:
      - frontend_logs:/var/log/nginx

# Добавляем nginx reverse proxy для продакшена
  nginx:
    image: nginx:alpine
    container_name: horizons_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
      - frontend
    restart: unless-stopped
    networks:
      - horizons_network

volumes:
  nginx_logs:
    driver: local
