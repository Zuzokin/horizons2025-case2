// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ API

interface ApiConfig {
    baseUrl: string;
    timeout: number;
    retries: number;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ URL API
  function getApiBaseUrl(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const envApiUrl = process.env.REACT_APP_API_BASE_URL;
    if (envApiUrl) {
      console.log('üîß Using API URL from environment:', envApiUrl);
      return envApiUrl;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π backend URL
    const savedBackendUrl = localStorage.getItem('backend_url');
    if (savedBackendUrl) {
      console.log('üîß Using saved backend URL:', savedBackendUrl);
      return savedBackendUrl;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    const savedIp = localStorage.getItem('server_ip');
    const savedPort = localStorage.getItem('server_port');
    if (savedIp && savedPort) {
      const savedUrl = `http://${savedIp}:${savedPort}`;
      console.log('üîß Using saved server configuration:', savedUrl);
      return savedUrl;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
    const currentHost = window.location.hostname;
    const currentPort = window.location.port;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç API –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä—Ç–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    let apiPort: string;
    
    if (currentHost === 'localhost' || currentHost === '127.0.0.1') {
      // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
      apiPort = currentPort || '80';
    } else if (currentPort === '3000' || currentPort === '') {
      // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ 3000, –±—ç–∫–µ–Ω–¥ —á–µ—Ä–µ–∑ nginx –Ω–∞ 80
      apiPort = '80';
    } else if (currentPort === '3001') {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      apiPort = '80';
    } else {
      // –ü—Ä–æ–¥–∞–∫—à–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—Ç (nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –Ω–∞ 80)
      apiPort = currentPort || '80';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    const protocol = window.location.protocol === 'https:' ? 'https:' : 'http:';
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL
    const apiUrl = `${protocol}//${currentHost}:${apiPort}`;
    
    console.log(`üîß API Configuration:`, {
      currentHost,
      currentPort,
      apiPort,
      protocol,
      apiUrl,
      envOverride: !!envApiUrl,
      savedConfig: savedIp ? `http://${savedIp}:${savedPort}` : null,
      environment: getCurrentEnvironment()
    });
    
    return apiUrl;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API
  export function getApiConfig(): ApiConfig {
    return {
      baseUrl: getApiBaseUrl(),
      timeout: parseInt(process.env.REACT_APP_API_TIMEOUT || '30000'), // 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      retries: parseInt(process.env.REACT_APP_API_RETRIES || '3')
    };
  }
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  export const API_BASE = getApiBaseUrl();
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
  export const API_ENDPOINTS = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    AUTH: {
      LOGIN: '/auth/token',
      REGISTER: '/auth/',
      USER_INFO: '/users/me'
    },
    
    // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    PRODUCTS: {
      LIST: '/csv-data/products-json',
      DETAILS: '/csv-data/product-details'
    },
    
    // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
    CONTRAGENTS: {
      BY_NAME: '/GetContrpartnerByName',
      FIRST: '/GetContrpartnerFirst',
      ALL: '/GetContrpartnerAll'
    }
  };
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–∫—Ä—É–∂–µ–Ω–∏–π
  export const ENVIRONMENT_CONFIG = {
    development: {
      apiUrl: 'http://localhost:8000',
      debug: true,
      logLevel: 'debug'
    },
    
    production: {
      apiUrl: getApiBaseUrl(),
      debug: false,
      logLevel: 'error'
    },
    
    staging: {
      apiUrl: getApiBaseUrl(),
      debug: true,
      logLevel: 'info'
    }
  };
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  export function getCurrentEnvironment(): 'development' | 'production' | 'staging' {
    const hostname = window.location.hostname;
    
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      return 'development';
    } else if (hostname.includes('staging') || hostname.includes('test')) {
      return 'staging';
    } else {
      return 'production';
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  export function getEnvironmentConfig() {
    const env = getCurrentEnvironment();
    return ENVIRONMENT_CONFIG[env];
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL API
  export function validateApiUrl(url: string): boolean {
    try {
      const parsedUrl = new URL(url);
      return parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:';
    } catch {
      return false;
    }
  }
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  export async function fetchWithTimeout(
    url: string, 
    options: RequestInit = {}, 
    timeoutMs: number = 30000
  ): Promise<Response> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
    
    try {
      const response = await fetch(url, {
        ...options,
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      return response;
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
  export async function testApiConnection(): Promise<boolean> {
    try {
      const config = getApiConfig();
      const response = await fetchWithTimeout(`${config.baseUrl}/health`, {
        method: 'GET'
      }, 5000);
      
      return response.ok;
    } catch (error) {
      console.warn('API connection test failed:', error);
      return false;
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
  export async function getServerInfo(): Promise<any> {
    try {
      const config = getApiConfig();
      const response = await fetchWithTimeout(`${config.baseUrl}/info`, {
        method: 'GET'
      }, 5000);
      
      if (response.ok) {
        return await response.json();
      }
      return null;
    } catch (error) {
      console.warn('Failed to get server info:', error);
      return null;
    }
  }
  