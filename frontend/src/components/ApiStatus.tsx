import React, { useState, useEffect } from 'react';
import {
  Alert,
  AlertTitle,
  Box,
  Button,
  Chip,
  CircularProgress,
  Stack,
  Typography
} from '@mui/material';
import {
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Refresh as RefreshIcon,
  Warning as WarningIcon
} from '@mui/icons-material';
import { getApiConfig, testApiConnection } from '../config/apiConfig';

interface ApiStatusProps {
  onApiUrlChange?: (url: string) => void;
}

function ApiStatus({ onApiUrlChange }: ApiStatusProps) {
  const [status, setStatus] = useState<'checking' | 'available' | 'unavailable' | 'error'>('checking');
  const [currentUrl, setCurrentUrl] = useState<string>('');
  const [error, setError] = useState<string>('');
  const [isChecking, setIsChecking] = useState(false);

  const checkApiStatus = async () => {
    setIsChecking(true);
    setStatus('checking');
    setError('');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π backend URL
      const savedBackendUrl = localStorage.getItem('backend_url');
      let config;
      
      if (savedBackendUrl) {
        config = { baseUrl: savedBackendUrl };
        console.log('üîß Using saved backend URL:', savedBackendUrl);
      } else {
        config = getApiConfig();
      }
      
      setCurrentUrl(config.baseUrl);
      
      if (onApiUrlChange) {
        onApiUrlChange(config.baseUrl);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      const isAvailable = await testApiConnection();
      
      if (isAvailable) {
        setStatus('available');
      } else {
        setStatus('unavailable');
        setError('API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      }
    } catch (err) {
      setStatus('error');
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setIsChecking(false);
    }
  };

  useEffect(() => {
    checkApiStatus();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const getStatusIcon = () => {
    switch (status) {
      case 'checking':
        return <CircularProgress size={20} />;
      case 'available':
        return <CheckCircleIcon color="success" />;
      case 'unavailable':
        return <WarningIcon color="warning" />;
      case 'error':
        return <ErrorIcon color="error" />;
      default:
        return <ErrorIcon color="error" />;
    }
  };

  const getStatusColor = () => {
    switch (status) {
      case 'available':
        return 'success';
      case 'unavailable':
        return 'warning';
      case 'error':
        return 'error';
      default:
        return 'default';
    }
  };

  const getStatusText = () => {
    switch (status) {
      case 'checking':
        return '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...';
      case 'available':
        return 'API –¥–æ—Å—Ç—É–ø–µ–Ω';
      case 'unavailable':
        return 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      case 'error':
        return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
    }
  };

  return (
    <Box sx={{ p: 2 }}>
      <Stack direction="row" alignItems="center" spacing={2} sx={{ mb: 2 }}>
        <Typography variant="h6" sx={{ fontWeight: 600 }}>
          –°—Ç–∞—Ç—É—Å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        </Typography>
        <Chip
          icon={getStatusIcon()}
          label={getStatusText()}
          color={getStatusColor() as any}
          variant="outlined"
        />
        <Button
          variant="outlined"
          size="small"
          startIcon={<RefreshIcon />}
          onClick={checkApiStatus}
          disabled={isChecking}
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        </Button>
      </Stack>

      {currentUrl && (
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          –¢–µ–∫—É—â–∏–π API URL: <code>{currentUrl}</code>
        </Typography>
      )}

      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          <AlertTitle>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</AlertTitle>
          {error}
        </Alert>
      )}

      {status === 'unavailable' && (
        <Alert severity="warning" sx={{ mb: 2 }}>
          <AlertTitle>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</AlertTitle>
          API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
        </Alert>
      )}

      {status === 'available' && (
        <Alert severity="success">
          <AlertTitle>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</AlertTitle>
          API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        </Alert>
      )}
    </Box>
  );
}

export default ApiStatus;
