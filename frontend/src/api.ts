// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
import { API_BASE, getApiConfig, API_ENDPOINTS, getCurrentEnvironment, fetchWithTimeout } from './config/apiConfig';

// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('üöÄ API Configuration loaded:', {
  baseUrl: API_BASE,
  environment: getCurrentEnvironment(),
  endpoints: API_ENDPOINTS
});

export async function getContrpartnerByName(name: string) {
  const res = await fetch(`${API_BASE}/GetContrpartnerByName?name=${encodeURIComponent(name)}`);
  const data = await res.json();
  // –í–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ value, –µ—Å–ª–∏ –µ—Å—Ç—å
  return Array.isArray(data) ? data.map(item => item.value) : [];
}

export async function getContrpartnerFirst() {
  const res = await fetch(`${API_BASE}/GetContrpartnerFirst`);
  return await res.json();
}

export async function getTnsByContrpartner(id: number) {
  const res = await fetch(`${API_BASE}/GetTnsByContrpartner?id=${id}`);
  return await res.json();
}

export async function getContrpartnerByInn(inn: string) {
  const res = await fetch(`${API_BASE}/GetContrpartnerByInn?inn=${encodeURIComponent(inn)}`);
  const data = await res.json();
  return Array.isArray(data) ? data.map(item => item.value) : [];
}

export async function getTnsByMonths(id: number) {
  const res = await fetch(`${API_BASE}/GetTnsByMonths?id=${id}`);
  return await res.json();
}

export async function getTnsBySuppliers(id: number) {
  const res = await fetch(`${API_BASE}/GetTnsBySuppliers?id=${id}`);
  return await res.json();
}

export async function getAssortments(id: number) {
  const res = await fetch(`${API_BASE}/GetAssortments?id=${id}`);
  return await res.json();
}

export async function getSaleDocumentsByContrpartner(id: number) {
  const res = await fetch(`${API_BASE}/GetSaleDocumentsByContrpartner?id=${id}`);
  return await res.json();
}

export async function getFrequentlyAssortment(id: number) {
  const res = await fetch(`${API_BASE}/GetFrequentlyAssortment?id=${id}`);
  return await res.json();
}

export async function getFrequentlyAssortmentByContrpartner(id: number) {
  const res = await fetch(`${API_BASE}/GetFrequentlyAssortmentByContrpartner?id=${id}`);
  const text = await res.text();
  if (!text) return [];
  return JSON.parse(text);
}

export async function getAprioriAssortment(id: number) {
  const res = await fetch(`${API_BASE}/GetAssortmentApriori?id=${id}`);
  const text = await res.text();
  if (!text) return [];
  return JSON.parse(text);
}

// ===== API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω =====

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–¥—É–∫—Ü–∏—é —Å fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
export async function getMetalsPricingData(limit: number = 100, offset: number = 0) {
  try {
    console.log(`üîÑ Fetching real data from: ${API_BASE}/csv-data/products-json?limit=${limit}&offset=${offset}`);
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}${API_ENDPOINTS.PRODUCTS.LIST}?limit=${limit}&offset=${offset}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      mode: 'cors',
    }, config.timeout);
    
    console.log('‚úÖ Real API Response status:', res.status);
    console.log('‚úÖ Real API Response headers:', res.headers);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real data received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real metals pricing data:', error);
    console.log('üîÑ Falling back to mock data...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockMetalsPricingData(limit, offset);
    console.log('‚úÖ Using mock data as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
async function getMockMetalsPricingData(limit: number = 100, offset: number = 0) {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const { metalsPricingData } = await import('./data/metalsPricingData');
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫ –º–æ–∫–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
  const startIndex = offset;
  const endIndex = Math.min(startIndex + limit, metalsPricingData.records.length);
  const paginatedRecords = metalsPricingData.records.slice(startIndex, endIndex);
  
  return {
    success: true,
    generated_at: new Date().toISOString(),
    currency: metalsPricingData.currency,
    price_unit: metalsPricingData.price_unit,
    total_count: metalsPricingData.records.length,
    limit: limit,
    offset: offset,
    records: paginatedRecords,
    is_mock_data: true // –§–ª–∞–≥ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  };
}

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç—Ä—É–±—ã —Å fallback
export async function getProblematicTubes(filters?: any) {
  try {
    console.log('üîÑ Fetching real problematic tubes data...');
    const queryParams = filters ? new URLSearchParams(filters).toString() : '';
    const url = `${API_BASE}/api/problematic-tubes${queryParams ? `?${queryParams}` : ''}`;
    const config = getApiConfig();
    const res = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real problematic tubes data received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real problematic tubes:', error);
    console.log('üîÑ Falling back to mock problematic tubes data...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockProblematicTubes(filters);
    console.log('‚úÖ Using mock problematic tubes data as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä—É–±
async function getMockProblematicTubes(filters?: any) {
  const { metalsPricingData } = await import('./data/metalsPricingData');
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç—Ä—É–±
  const problematicTubes = metalsPricingData.records.map((record, index) => ({
    id: `T${index + 1}`,
    ...record,
    problemStatus: index % 3 === 0 ? 'high' : index % 3 === 1 ? 'medium' : 'low',
    problemDescription: index % 3 === 0 ? '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏' : 
                       index % 3 === 1 ? '–¶–µ–Ω–∞ –≤—ã—à–µ —Ä—ã–Ω–æ—á–Ω–æ–π' : '–¢—Ä–µ–±—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
    recommendation: index % 3 === 0 ? '–°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã' :
                   index % 3 === 1 ? '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã' : '–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω',
    priceDiffPercent: (Math.random() - 0.5) * 30 // –°–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç -15% –¥–æ +15%
  }));
  
  return {
    success: true,
    generated_at: new Date().toISOString(),
    total_count: problematicTubes.length,
    records: problematicTubes,
    is_mock_data: true
  };
}

// –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å fallback
export async function getCompetitorNotifications() {
  try {
    console.log('üîÑ Fetching real competitor notifications...');
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/competitor-notifications`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real competitor notifications received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real competitor notifications:', error);
    console.log('üîÑ Falling back to mock competitor notifications...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockCompetitorNotifications();
    console.log('‚úÖ Using mock competitor notifications as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
async function getMockCompetitorNotifications() {
  return {
    success: true,
    generated_at: new Date().toISOString(),
    notifications: [
      {
        id: 'N1',
        type: 'price_change',
        competitor: '–¢–ú–ö',
        product: '–¢—Ä—É–±–∞ –±–µ—Å—à–æ–≤–Ω–∞—è 57√ó3.5',
        change: -5.2,
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        severity: 'medium'
      },
      {
        id: 'N2',
        type: 'stock_change',
        competitor: '–ß–¢–ü–ó',
        product: '–¢—Ä—É–±–∞ –í–ì–ü 32√ó3.2',
        change: -15,
        timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
        severity: 'high'
      },
      {
        id: 'N3',
        type: 'new_product',
        competitor: '–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å',
        product: '–¢—Ä—É–±–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è 100√ó50√ó4',
        change: 0,
        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        severity: 'low'
      }
    ],
    is_mock_data: true
  };
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç—Ä—É–±–µ
export async function getTubeDetailAnalysis(tubeId: string) {
  try {
    const res = await fetch(`${API_BASE}/api/tube-analysis/${tubeId}`);
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    return await res.json();
  } catch (error) {
    console.error('Error fetching tube analysis:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–∞–º —Å fallback
export async function getPriceRecommendations(filters?: any) {
  try {
    console.log('üîÑ Fetching real price recommendations...');
    const queryParams = filters ? new URLSearchParams(filters).toString() : '';
    const url = `${API_BASE}/api/price-recommendations${queryParams ? `?${queryParams}` : ''}`;
    const config = getApiConfig();
    const res = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real price recommendations received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real price recommendations:', error);
    console.log('üîÑ Falling back to mock price recommendations...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockPriceRecommendations(filters);
    console.log('‚úÖ Using mock price recommendations as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–∞–º
async function getMockPriceRecommendations(filters?: any) {
  const { metalsPricingData } = await import('./data/metalsPricingData');
  
  const recommendations = metalsPricingData.records.slice(0, 5).map((record, index) => ({
    id: `R${index + 1}`,
    product_id: `P${index + 1}`,
    product_name: record.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,
    current_price: record.—Ü–µ–Ω–∞,
    recommended_price: Math.round(record.—Ü–µ–Ω–∞ * (0.95 + Math.random() * 0.1)), // ¬±5% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    reason: index % 3 === 0 ? '–°–Ω–∏–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏' :
            index % 3 === 1 ? '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ä–æ—Å—Ç–∞ —Å–ø—Ä–æ—Å–∞' : '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    confidence: 0.7 + Math.random() * 0.3, // 70-100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    impact_score: Math.random() * 10, // 0-10 –±–∞–ª–ª–æ–≤ –≤–ª–∏—è–Ω–∏—è
    timestamp: new Date().toISOString()
  }));
  
  return {
    success: true,
    generated_at: new Date().toISOString(),
    total_count: recommendations.length,
    recommendations: recommendations,
    is_mock_data: true
  };
}

// –ù–æ–≤—ã–µ API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å nginx –º–∞—Ä—à—Ä—É—Ç–∞–º–∏

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å fallback
export async function getParserData(filters?: any) {
  try {
    console.log('üîÑ Fetching real parser data...');
    const config = getApiConfig();
    const queryParams = filters ? new URLSearchParams(filters).toString() : '';
    const url = `${API_BASE}/parser/data${queryParams ? `?${queryParams}` : ''}`;
    
    const res = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real Parser API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real parser data received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real parser data:', error);
    console.log('üîÑ Falling back to mock parser data...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockParserData(filters);
    console.log('‚úÖ Using mock parser data as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
async function getMockParserData(filters?: any) {
  return {
    success: true,
    generated_at: new Date().toISOString(),
    total_records: 1250,
    last_update: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    sources: [
      { name: '23met.ru', status: 'active', records: 450 },
      { name: 'tmk.ru', status: 'active', records: 320 },
      { name: 'chtpz.ru', status: 'active', records: 280 },
      { name: 'severstal.ru', status: 'active', records: 200 }
    ],
    statistics: {
      total_products: 1250,
      price_updates: 45,
      new_products: 12,
      discontinued_products: 3
    },
    is_mock_data: true
  };
}

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å fallback
export async function getPricingData(filters?: any) {
  try {
    console.log('üîÑ Fetching real pricing data...');
    const config = getApiConfig();
    const queryParams = filters ? new URLSearchParams(filters).toString() : '';
    const url = `${API_BASE}/pricing/data${queryParams ? `?${queryParams}` : ''}`;
    
    const res = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real Pricing API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real pricing data received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real pricing data:', error);
    console.log('üîÑ Falling back to mock pricing data...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockPricingData(filters);
    console.log('‚úÖ Using mock pricing data as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
async function getMockPricingData(filters?: any) {
  const { metalsPricingData, getAveragePrice } = await import('./data/metalsPricingData');
  
  return {
    success: true,
    generated_at: new Date().toISOString(),
    market_analysis: {
      average_price: getAveragePrice(metalsPricingData.records),
      price_trend: 'stable',
      market_volatility: 0.15,
      competitor_count: 4
    },
    recommendations: metalsPricingData.records.slice(0, 3).map((record, index) => ({
      product_id: `P${index + 1}`,
      product_name: record.–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ,
      current_price: record.—Ü–µ–Ω–∞,
      recommended_price: Math.round(record.—Ü–µ–Ω–∞ * (0.95 + Math.random() * 0.1)),
      confidence: 0.8 + Math.random() * 0.2,
      reason: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    })),
    is_mock_data: true
  };
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–µ—Ä–∞ —Å fallback
export async function getParserStats() {
  try {
    console.log('üîÑ Fetching real parser stats...');
    const config = getApiConfig();
    const url = `${API_BASE}/parser/stats`;
    
    const res = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real Parser Stats API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real parser stats received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real parser stats:', error);
    console.log('üîÑ Falling back to mock parser stats...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockParserStats();
    console.log('‚úÖ Using mock parser stats as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
async function getMockParserStats() {
  return {
    success: true,
    generated_at: new Date().toISOString(),
    stats: {
      total_parsed: 1250,
      successful_parses: 1180,
      failed_parses: 70,
      last_parse_time: new Date(Date.now() - 15 * 60 * 1000).toISOString(), // 15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      average_parse_time: 2.5,
      sources_active: 4,
      sources_total: 5
    },
    performance: {
      uptime: '99.8%',
      response_time: '1.2s',
      error_rate: '5.6%'
    },
    is_mock_data: true
  };
}

// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å fallback
export async function getPricingAnalytics(filters?: any) {
  try {
    console.log('üîÑ Fetching real pricing analytics...');
    const config = getApiConfig();
    const queryParams = filters ? new URLSearchParams(filters).toString() : '';
    const url = `${API_BASE}/pricing/analytics${queryParams ? `?${queryParams}` : ''}`;
    
    const res = await fetchWithTimeout(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real Pricing Analytics API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real pricing analytics received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real pricing analytics:', error);
    console.log('üîÑ Falling back to mock pricing analytics...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockPricingAnalytics(filters);
    console.log('‚úÖ Using mock pricing analytics as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
async function getMockPricingAnalytics(filters?: any) {
  const { metalsPricingData, getAveragePrice, getPriceRange } = await import('./data/metalsPricingData');
  
  const avgPrice = getAveragePrice(metalsPricingData.records);
  const priceRange = getPriceRange(metalsPricingData.records);
  
  return {
    success: true,
    generated_at: new Date().toISOString(),
    analytics: {
      price_distribution: {
        min: priceRange.min,
        max: priceRange.max,
        average: avgPrice,
        median: Math.round((priceRange.min + priceRange.max) / 2)
      },
      trends: {
        daily_change: 0.5,
        weekly_change: 2.1,
        monthly_change: -1.8
      },
      market_segments: [
        { name: '–¢—Ä—É–±—ã –±–µ—Å—à–æ–≤–Ω—ã–µ', count: 8, avg_price: 95000 },
        { name: '–¢—Ä—É–±—ã —ç–ª–µ–∫—Ç—Ä–æ—Å–≤–∞—Ä–Ω—ã–µ', count: 4, avg_price: 70000 },
        { name: '–¢—Ä—É–±—ã –í–ì–ü', count: 4, avg_price: 69000 }
      ]
    },
    recommendations: {
      high_priority: 3,
      medium_priority: 5,
      low_priority: 2
    },
    is_mock_data: true
  };
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ü–µ–Ω–µ
export async function applyPriceRecommendation(recommendationId: string) {
  try {
    const res = await fetch(`${API_BASE}/api/apply-recommendation/${recommendationId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    return await res.json();
  } catch (error) {
    console.error('Error applying price recommendation:', error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞
export async function updateProductPrice(productData: {
  product_id: string;
  recommended_price: number;
  reason: string;
}) {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/products/update-price`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
      body: JSON.stringify(productData),
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('Product price updated:', data);
    return data;
  } catch (error) {
    console.error('Error updating product price:', error);
    throw error;
  }
}

// ===== API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è =====

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ —Ü–µ–Ω–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
export async function getPriceRecommendation(productData: any) {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/pricing/recommend`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
      body: JSON.stringify(productData),
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('Price recommendation received:', data);
    return data;
  } catch (error) {
    console.error('Error fetching price recommendation:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–∞–º –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export async function getBulkPriceRecommendations(products: any[]) {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/pricing/recommend/bulk`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
      body: JSON.stringify({ products }),
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('Bulk price recommendations received:', data);
    return data;
  } catch (error) {
    console.error('Error fetching bulk price recommendations:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å fallback
export async function getMarketData() {
  try {
    console.log('üîÑ Fetching real market data...');
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/pricing/market-data`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real Market Data API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real market data received:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching real market data:', error);
    console.log('üîÑ Falling back to mock market data...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockMarketData();
    console.log('‚úÖ Using mock market data as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function getMockMarketData() {
  const { metalsPricingData, getAveragePrice } = await import('./data/metalsPricingData');
  
  const avgPrice = getAveragePrice(metalsPricingData.records);
  
  return {
    success: true,
    generated_at: new Date().toISOString(),
    market_history: [
      {
        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: Math.round(avgPrice * 0.98),
        volume: 1250,
        volatility: 0.12
      },
      {
        date: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: Math.round(avgPrice * 0.99),
        volume: 1180,
        volatility: 0.15
      },
      {
        date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: Math.round(avgPrice * 1.01),
        volume: 1320,
        volatility: 0.18
      },
      {
        date: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: Math.round(avgPrice * 1.02),
        volume: 1400,
        volatility: 0.14
      },
      {
        date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: Math.round(avgPrice * 1.00),
        volume: 1280,
        volatility: 0.16
      },
      {
        date: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: Math.round(avgPrice * 0.99),
        volume: 1150,
        volatility: 0.13
      },
      {
        date: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        average_price: avgPrice,
        volume: 1200,
        volatility: 0.15
      }
    ],
    current_market: {
      average_price: avgPrice,
      trend: 'stable',
      volatility: 0.15,
      volume: 1200
    },
    is_mock_data: true
  };
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
export async function updateMarketData(marketData: any) {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/pricing/market-data/update`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
      },
      mode: 'cors',
      body: JSON.stringify({ market_history: marketData }),
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('Market data updated:', data);
    return data;
  } catch (error) {
    console.error('Error updating market data:', error);
    throw error;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å fallback
export async function checkPricingHealth() {
  try {
    console.log('üîÑ Checking real pricing service health...');
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/api/pricing/health`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real Pricing Health API Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real pricing health check successful:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error checking real pricing health:', error);
    console.log('üîÑ Falling back to mock pricing health...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockPricingHealth();
    console.log('‚úÖ Using mock pricing health as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
async function getMockPricingHealth() {
  return {
    success: true,
    status: 'healthy',
    timestamp: new Date().toISOString(),
    services: {
      pricing_algorithm: 'healthy',
      market_data: 'healthy',
      recommendations: 'healthy',
      analytics: 'healthy'
    },
    performance: {
      response_time: '120ms',
      uptime: '99.9%',
      last_error: null
    },
    is_mock_data: true
  };
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å fallback
export async function checkApiHealth() {
  try {
    console.log('üîÑ Checking real API health...');
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/health`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
      },
      mode: 'cors',
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('‚ùå Real API Health Error:', errorText);
      throw new Error(`HTTP error! status: ${res.status}, message: ${errorText}`);
    }
    
    const data = await res.json();
    console.log('‚úÖ Real API health check successful:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Error checking real API health:', error);
    console.log('üîÑ Falling back to mock API health...');
    
    // Fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const mockData = await getMockApiHealth();
    console.log('‚úÖ Using mock API health as fallback:', mockData);
    return mockData;
  }
}

// –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function getMockApiHealth() {
  return {
    success: true,
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: 'production',
    services: {
      database: 'healthy',
      parser: 'healthy',
      pricing: 'healthy',
      auth: 'healthy'
    },
    uptime: '99.9%',
    is_mock_data: true
  };
}

// ===== API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ =====

export interface RegisterRequest {
  email: string;
  first_name: string;
  last_name: string;
  password: string;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface TokenResponse {
  access_token: string;
  token_type: string;
}

export interface UserResponse {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  is_active: boolean;
  is_admin: boolean;
  created_at: string;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function registerUser(userData: RegisterRequest): Promise<string> {
  try {
    console.log('Registering user:', userData.email);
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}${API_ENDPOINTS.AUTH.REGISTER}`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      mode: 'cors',
      credentials: 'omit',
      body: JSON.stringify(userData),
    }, config.timeout);
    
    console.log('Registration response status:', res.status);
    console.log('Registration response headers:', res.headers);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('Registration error:', errorText);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (res.status === 405) {
        throw new Error('CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      } else if (res.status === 500) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
      } else if (res.status === 422) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç email –∏ –ø–∞—Ä–æ–ª—å.');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${res.status} - ${errorText}`);
      }
    }
    
    const result = await res.text();
    console.log('Registration successful');
    return result;
  } catch (error) {
    console.error('Error registering user:', error);
    throw error;
  }
}

// –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
export async function loginUser(credentials: LoginRequest): Promise<TokenResponse> {
  try {
    console.log('Logging in user:', credentials.username);
    
    const formData = new URLSearchParams();
    formData.append('grant_type', 'password');
    formData.append('username', credentials.username);
    formData.append('password', credentials.password);
    
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}${API_ENDPOINTS.AUTH.LOGIN}`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      mode: 'cors',
      credentials: 'omit',
      body: formData,
    }, config.timeout);
    
    console.log('Login response status:', res.status);
    console.log('Login response headers:', res.headers);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('Login error:', errorText);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (res.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      } else if (res.status === 405) {
        throw new Error('CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      } else if (res.status === 422) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.');
      } else {
        throw new Error(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${res.status} - ${errorText}`);
      }
    }
    
    const tokenData = await res.json();
    console.log('Login successful');
    return tokenData;
  } catch (error) {
    console.error('Error logging in:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export async function getCurrentUser(token: string): Promise<UserResponse> {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}${API_ENDPOINTS.AUTH.USER_INFO}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      console.error('Get user error:', errorText);
      throw new Error(`Failed to get user: ${res.status} - ${errorText}`);
    }
    
    const userData = await res.json();
    console.log('User data retrieved');
    return userData;
  } catch (error) {
    console.error('Error getting user data:', error);
    throw error;
  }
}

// –ê–¥–º–∏–Ω API —Ñ—É–Ω–∫—Ü–∏–∏
export interface AdminUserResponse {
  id: string;
  email: string;
  first_name: string;
  last_name: string;
  is_admin: boolean;
}

export interface AdminRegisterRequest {
  email: string;
  first_name: string;
  last_name: string;
  password: string;
}

export interface CreateAdminRequest {
  email: string;
  password: string;
  first_name?: string;
  last_name?: string;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
export async function adminRegisterUser(userData: AdminRegisterRequest, token: string): Promise<void> {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/admin/register-user`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(userData),
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(`Failed to register user: ${res.status} - ${errorText}`);
    }
  } catch (error) {
    console.error('Error registering user:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function getAllUsers(token: string): Promise<AdminUserResponse[]> {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/admin/users`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(`Failed to get users: ${res.status} - ${errorText}`);
    }
    
    return await res.json();
  } catch (error) {
    console.error('Error getting users:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export async function createAdminUser(adminData: CreateAdminRequest, token: string): Promise<void> {
  try {
    const config = getApiConfig();
    const res = await fetchWithTimeout(`${API_BASE}/admin/create-admin`, {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(adminData),
    }, config.timeout);
    
    if (!res.ok) {
      const errorText = await res.text();
      throw new Error(`Failed to create admin: ${res.status} - ${errorText}`);
    }
  } catch (error) {
    console.error('Error creating admin:', error);
    throw error;
  }
}

