import { getMetalsPricingData } from '../api';

export interface RealMetalPricingRecord {
  "–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏": string;
  "—Å–∫–ª–∞–¥": string;
  "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": string;
  "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏": string;
  "–¥–∏–∞–º–µ—Ç—Ä": string;
  "–ì–û–°–¢": string;
  "—Ü–µ–Ω–∞": number;
  "–Ω–∞–ª–∏—á–∏–µ": string;
  "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": string;
  "—Ä–µ–≥–∏–æ–Ω": string;
}

export interface ProblematicTubeRecord extends RealMetalPricingRecord {
  id: string;
  problemStatus: string;
  problemDescription: string;
  recommendation: string;
  priceDiffPercent: number;
}

export interface RealMetalsPricingResponse {
  success: boolean;
  generated_at: string;
  currency: string;
  price_unit: string;
  total_count: number;
  limit: number;
  offset: number;
  records: RealMetalPricingRecord[];
}

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
let cachedData: RealMetalsPricingResponse | null = null;
let lastFetchTime: number = 0;
const CACHE_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export async function fetchRealMetalsPricingData(limit: number = 1000, offset: number = 0): Promise<RealMetalsPricingResponse> {
  const now = Date.now();
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
  if (cachedData && (now - lastFetchTime) < CACHE_DURATION) {
    console.log('Using cached data');
    return cachedData;
  }
  
  try {
    console.log('Fetching fresh data from API...');
    const data = await getMetalsPricingData(limit, offset);
    cachedData = data;
    lastFetchTime = now;
    console.log('Data cached successfully');
    return data;
  } catch (error) {
    console.error('Error fetching real metals pricing data:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (cachedData) {
      console.log('Using cached data due to API error');
      return cachedData;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ
    console.log('Using fallback data');
    return getFallbackData();
  }
}

// Fallback –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
function getFallbackData(): RealMetalsPricingResponse {
  return {
    success: true,
    generated_at: new Date().toISOString(),
    currency: "RUB",
    price_unit: "—Ä—É–±/—Ç",
    total_count: 5,
    limit: 1000,
    offset: 0,
    records: [
      {
        "–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏": "–ì–∞–±–∞—Ä–∏—Ç",
        "—Å–∫–ª–∞–¥": "–ú–æ—Å–∫–≤–∞",
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–¢—Ä—É–±–∞ –í–ì–ü",
        "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏": "1",
        "–¥–∏–∞–º–µ—Ç—Ä": "15—Ö2.5",
        "–ì–û–°–¢": "–ì–û–°–¢ 3262-75",
        "—Ü–µ–Ω–∞": 60690,
        "–Ω–∞–ª–∏—á–∏–µ": "–≤ –Ω–∞–ª–∏—á–∏–∏ (50 —Ç)",
        "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–ù–æ–≤–æ—Å—Ç–∞–ª—å-–ú–∞—Ä–∫–µ—Ç",
        "—Ä–µ–≥–∏–æ–Ω": "–¶–§–û"
      },
      {
        "–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏": "–ì–∞–±–∞—Ä–∏—Ç",
        "—Å–∫–ª–∞–¥": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–¢—Ä—É–±–∞ –í–ì–ü",
        "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏": "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "–¥–∏–∞–º–µ—Ç—Ä": "50—Ö3.5",
        "–ì–û–°–¢": "–ì–û–°–¢ 3262-75",
        "—Ü–µ–Ω–∞": 61500,
        "–Ω–∞–ª–∏—á–∏–µ": "–≤ –Ω–∞–ª–∏—á–∏–∏ (50 —Ç)",
        "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–°—Ç–∞–ª–µ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "—Ä–µ–≥–∏–æ–Ω": "–Æ–§–û"
      },
      {
        "–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏": "–ì–∞–±–∞—Ä–∏—Ç",
        "—Å–∫–ª–∞–¥": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–¢—Ä—É–±–∞ –í–ì–ü",
        "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏": "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "–¥–∏–∞–º–µ—Ç—Ä": "40—Ö3.5",
        "–ì–û–°–¢": "–ì–û–°–¢ 3262-75",
        "—Ü–µ–Ω–∞": 63500,
        "–Ω–∞–ª–∏—á–∏–µ": "–≤ –Ω–∞–ª–∏—á–∏–∏ (50 —Ç)",
        "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–°—Ç–∞–ª–µ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "—Ä–µ–≥–∏–æ–Ω": "–Æ–§–û"
      },
      {
        "–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏": "–ü—Ä–æ—Ñ–∏–ª—å –ì–û–°–¢/–°–¢–û",
        "—Å–∫–ª–∞–¥": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–¢—Ä—É–±–∞ –í–ì–ü",
        "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏": "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "–¥–∏–∞–º–µ—Ç—Ä": "40—Ö3",
        "–ì–û–°–¢": "–ì–û–°–¢ 3262-75",
        "—Ü–µ–Ω–∞": 63500,
        "–Ω–∞–ª–∏—á–∏–µ": "–≤ –Ω–∞–ª–∏—á–∏–∏ (50 —Ç)",
        "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–°—Ç–∞–ª–µ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "—Ä–µ–≥–∏–æ–Ω": "–Æ–§–û"
      },
      {
        "–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏": "–ì–∞–±–∞—Ä–∏—Ç",
        "—Å–∫–ª–∞–¥": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–¢—Ä—É–±–∞ –í–ì–ü",
        "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏": "–Ω–µ —É–∫–∞–∑–∞–Ω",
        "–¥–∏–∞–º–µ—Ç—Ä": "32—Ö3.2",
        "–ì–û–°–¢": "–ì–û–°–¢ 3262-75",
        "—Ü–µ–Ω–∞": 63500,
        "–Ω–∞–ª–∏—á–∏–µ": "–≤ –Ω–∞–ª–∏—á–∏–∏ (50 —Ç)",
        "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–°—Ç–∞–ª–µ–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è",
        "—Ä–µ–≥–∏–æ–Ω": "–Æ–§–û"
      }
    ]
  };
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–º—É —Ñ–∞–π–ª—É)
export const getUniqueValues = (records: RealMetalPricingRecord[], field: keyof RealMetalPricingRecord): string[] => {
  const values = new Set(records.map(record => String(record[field])));
  return Array.from(values).sort();
};

export const getFilteredRecords = (
  records: RealMetalPricingRecord[],
  filters: {
    productType: string;
    warehouse: string;
    name: string;
    steelGrade: string;
    diameter: string;
    gost: string;
  }
): RealMetalPricingRecord[] => {
  console.log('üîç getFilteredRecords called with', records.length, 'records');
  console.log('üîç Filters:', filters);
  
  const filtered = records.filter(record => {
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    if (filters.productType && filters.productType !== '–í—Å–µ —Ç–∏–ø—ã') {
      const productType = record['–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏']?.toLowerCase() || '';
      const filterValue = filters.productType.toLowerCase();
      if (!productType.includes(filterValue)) {
        console.log('üîç Filtered out by product type:', record['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'], 'vs', filters.productType);
        return false;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É
    if (filters.warehouse && filters.warehouse !== '–í—Å–µ —Å–∫–ª–∞–¥—ã') {
      const warehouse = record['—Å–∫–ª–∞–¥']?.toLowerCase() || '';
      const filterValue = filters.warehouse.toLowerCase();
      if (!warehouse.includes(filterValue)) {
        console.log('üîç Filtered out by warehouse:', record['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'], 'vs', filters.warehouse);
        return false;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
    if (filters.name && filters.name !== '–í—Å–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è') {
      if (!record['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.toLowerCase().includes(filters.name.toLowerCase())) {
        return false;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ä–∫–µ —Å—Ç–∞–ª–∏
    if (filters.steelGrade && filters.steelGrade !== '–í—Å–µ –º–∞—Ä–∫–∏') {
      if (!record['–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏']?.toLowerCase().includes(filters.steelGrade.toLowerCase())) {
        return false;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∏–∞–º–µ—Ç—Ä—É
    if (filters.diameter && filters.diameter !== '–í—Å–µ –¥–∏–∞–º–µ—Ç—Ä—ã') {
      if (!record['–¥–∏–∞–º–µ—Ç—Ä']?.toLowerCase().includes(filters.diameter.toLowerCase())) {
        return false;
      }
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ì–û–°–¢
    if (filters.gost && filters.gost !== '–í—Å–µ –ì–û–°–¢—ã') {
      if (!record['–ì–û–°–¢']?.toLowerCase().includes(filters.gost.toLowerCase())) {
        return false;
      }
    }
    
    return true;
  });
  
  console.log('üîç Filtered result:', filtered.length, 'records');
  return filtered;
};

export const getAveragePrice = (records: RealMetalPricingRecord[]): number => {
  if (records.length === 0) return 0;
  const validPrices = records.filter(record => record.—Ü–µ–Ω–∞ != null && record.—Ü–µ–Ω–∞ > 0);
  if (validPrices.length === 0) return 0;
  const total = validPrices.reduce((sum, record) => sum + record.—Ü–µ–Ω–∞, 0);
  return total / validPrices.length;
};

export const getPriceRange = (records: RealMetalPricingRecord[]): { min: number, max: number } => {
  if (records.length === 0) return { min: 0, max: 0 };
  const validPrices = records
    .map(record => record.—Ü–µ–Ω–∞)
    .filter(price => price != null && price > 0);
  if (validPrices.length === 0) return { min: 0, max: 0 };
  return { min: Math.min(...validPrices), max: Math.max(...validPrices) };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç—Ä—É–± –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö (—Ç—Ä–µ–±—É—é—â–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
export const getProblematicTubesFromRealData = (records: RealMetalPricingRecord[]): ProblematicTubeRecord[] => {
  console.log('üîç getProblematicTubesFromRealData called with', records.length, 'records');
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä—É–±—ã (–∏—Å–∫–ª—é—á–∞–µ–º –∞—Ä–º–∞—Ç—É—Ä—É, —É–≥–æ–ª–∫–∏ –∏ —Ç.–¥.)
  const tubeRecords = records.filter(record => {
    const productType = record['–≤–∏–¥_–ø—Ä–æ–¥—É–∫—Ü–∏–∏']?.toLowerCase() || '';
    const name = record['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']?.toLowerCase() || '';
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä—É–±—ã
    const isTube = productType.includes('—Ç—Ä—É–±–∞') || 
                   productType.includes('–≥–∞–±–∞—Ä–∏—Ç') || 
                   productType.includes('–ø—Ä–æ—Ñ–∏–ª—å') ||
                   name.includes('—Ç—Ä—É–±–∞') ||
                   name.includes('–≥–∞–±–∞—Ä–∏—Ç') ||
                   name.includes('–ø—Ä–æ—Ñ–∏–ª—å');
    
    // –ò—Å–∫–ª—é—á–∞–µ–º –∞—Ä–º–∞—Ç—É—Ä—É, —É–≥–æ–ª–∫–∏, —à–≤–µ–ª–ª–µ—Ä—ã –∏ —Ç.–¥.
    const isNotTube = productType.includes('–∞—Ä–º–∞—Ç—É—Ä–∞') ||
                      productType.includes('—É–≥–æ–ª–æ–∫') ||
                      productType.includes('—à–≤–µ–ª–ª–µ—Ä') ||
                      productType.includes('–±–∞–ª–∫–∞') ||
                      productType.includes('–ª–∏—Å—Ç') ||
                      productType.includes('–ø—Ä–æ–≤–æ–ª–æ–∫–∞') ||
                      name.includes('–∞—Ä–º–∞—Ç—É—Ä–∞') ||
                      name.includes('—É–≥–æ–ª–æ–∫') ||
                      name.includes('—à–≤–µ–ª–ª–µ—Ä') ||
                      name.includes('–±–∞–ª–∫–∞') ||
                      name.includes('–ª–∏—Å—Ç') ||
                      name.includes('–ø—Ä–æ–≤–æ–ª–æ–∫–∞');
    
    return isTube && !isNotTube;
  });
  
  console.log('üîç Filtered tube records:', tubeRecords.length);
  
  const avgPrice = getAveragePrice(tubeRecords);
  
  return tubeRecords.map((record, index) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    const price = record['—Ü–µ–Ω–∞'] || 0;
    const priceDiff = price - avgPrice;
    const priceDiffPercent = avgPrice > 0 ? (priceDiff / avgPrice) * 100 : 0;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã - –≤—Å–µ —Ç—Ä—É–±—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏
    let problemStatus = 'medium'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
    let problemDescription = '';
    let recommendation = '';
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    if (record['–Ω–∞–ª–∏—á–∏–µ'] && record['–Ω–∞–ª–∏—á–∏–µ'].includes('–º–∞–ª–æ')) {
      problemStatus = 'high';
      problemDescription = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏';
      recommendation = '–°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã';
    } else if (record['–Ω–∞–ª–∏—á–∏–µ'] && record['–Ω–∞–ª–∏—á–∏–µ'].includes('–ø–æ–¥ –∑–∞–∫–∞–∑')) {
      problemStatus = 'high';
      problemDescription = '–í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å';
      recommendation = '–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ';
    } else if (priceDiffPercent > 15) {
      problemStatus = 'high';
      problemDescription = '–¶–µ–Ω–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Ä—ã–Ω–æ—á–Ω–æ–π';
      recommendation = '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã';
    } else if (priceDiffPercent < -10) {
      problemStatus = 'medium';
      problemDescription = '–¶–µ–Ω–∞ –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π';
      recommendation = '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω—ã';
    } else {
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç—Ä—É–±
      problemStatus = 'medium';
      problemDescription = '–¢—Ä–µ–±—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞';
      recommendation = '–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ü–µ–Ω';
    }
    
    return {
      ...record,
      id: `T${index + 1}`,
      problemStatus,
      problemDescription,
      recommendation,
      priceDiffPercent
    };
  });
};
